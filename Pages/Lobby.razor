@page "/lobby"
@using TicTacToe.Data
@implements IDisposable
@inject NavigationManager Nav
@inject GameService Service
@inject IJSRuntime JS

<div>
    <h2>Lobby</h2>
    <button @onclick="CriarJogo">Criar Jogo</button>
    <button @onclick="CriarJogoVsCPU">Criar Jogo vs CPU</button>

    <div class="lobby-games">
        @foreach (var g in openGames)
        {
            <div class="lobby-game">
                <p><strong>Sala:</strong> @g.Id</p>
                <p><strong>Criador:</strong> @g.PlayerX</p>
                <button @onclick="@(() => EntrarJogo(g.Id))">Entrar</button>
            </div>
        }
    </div>
</div>

<style>
    .lobby-games {
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
        margin-top: 16px;
    }

    .lobby-game {
        background: #fff;
        padding: 12px;
        border-radius: 8px;
        border: 1px solid #ddd;
        flex: 1 1 calc(50% - 12px);
    }

        .lobby-game button {
            margin-top: 8px;
        }
</style>

@code {
    private string userName;
    System.Collections.Generic.IEnumerable<GameEntity> openGames;

    protected override async Task OnInitializedAsync()
    {
        openGames = Service.GetOpenGames().ToList();
        userName = await JS.InvokeAsync<string>("localStorage.getItem", "username");

        if (string.IsNullOrEmpty(userName))
        {
            Nav.NavigateTo("/");
        }

        Service.StateChanged += OnServiceStateChanged;
    }

    void OnServiceStateChanged()
    {
        openGames = Service.GetOpenGames().ToList();
        InvokeAsync(StateHasChanged);
    }

    void CriarJogo()
    {
        var g = Service.CreateGame(userName, false);
        Nav.NavigateTo($"/game/{g.Id}");
    }

    void CriarJogoVsCPU()
    {
        Nav.NavigateTo($"/difficulty");
    }

    void EntrarJogo(string id)
    {
        Service.JoinGame(id, userName);
        Nav.NavigateTo($"/game/{id}");
    }

    public void Dispose()
    {
        Service.StateChanged -= OnServiceStateChanged;
    }
}