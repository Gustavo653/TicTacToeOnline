@page "/ranking"
@using TicTacToe.Data
@inject GameService Service
@inject NavigationManager Nav

<h2 class="ranking-header">Ranking de Jogadores</h2>

<div class="ranking-actions">
    <input type="text"
           placeholder="🔍 Buscar jogador..."
           @bind="searchTerm"
           class="search-input" />
</div>

<div class="ranking-table-container card">
    <table class="ranking-table">
        <thead>
            <tr>
                <th @onclick="() => SortBy(nameof(Player.Name))" class="sortable">
                    Nome @SortIndicator(nameof(Player.Name))
                </th>
                <th @onclick="() => SortBy(nameof(Player.BestWinTime))" class="sortable">
                    Menor Tempo (s) @SortIndicator(nameof(Player.BestWinTime))
                </th>
                <th @onclick="() => SortBy(nameof(Player.ConsecutiveWins))" class="sortable">
                    Vitórias em Sequência @SortIndicator(nameof(Player.ConsecutiveWins))
                </th>
                <th @onclick="() => SortBy(nameof(Player.TotalWins))" class="sortable">
                    Total Vitórias @SortIndicator(nameof(Player.TotalWins))
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in DisplayedPlayers)
            {
                <tr>
                    <td>@p.Name</td>
                    <td>@(p.BestWinTime == long.MaxValue ? "-" : p.BestWinTime.ToString())</td>
                    <td>@p.ConsecutiveWins</td>
                    <td>@p.TotalWins</td>
                </tr>
            }
            @if (!DisplayedPlayers.Any())
            {
                <tr>
                    <td colspan="4">Nenhum jogador encontrado.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<button class="back-button" @onclick="Voltar">⬅️ Voltar</button>

<style>
    .ranking-table-container {
        margin-bottom: 1.5rem;
        padding: 1rem;
    }

    .search-input {
        width: 100%;
        max-width: 300px;
        padding: 0.5rem 1rem;
        margin-bottom: 1rem;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .ranking-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 0.5rem;
    }

        .ranking-table thead tr {
            background: var(--secondary-color);
            color: #fff;
            text-transform: uppercase;
        }

        .ranking-table th,
        .ranking-table td {
            padding: 0.75rem 1rem;
            text-align: center;
        }

        .ranking-table tbody tr {
            background: #fff;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            transition: transform 0.1s ease;
        }

            .ranking-table tbody tr:hover {
                transform: translateY(-2px);
            }

    .sortable {
        cursor: pointer;
    }

    .back-button {
        margin-top: 1rem;
        padding: 0.5rem 1rem;
    }
</style>

@code {
    private IEnumerable<Player> players;
    private string searchTerm = "";
    private string sortColumn = nameof(Player.BestWinTime);
    private bool sortAscending = true;

    protected override void OnInitialized()
    {
        players = Service.GetAllPlayers();
    }

    private IEnumerable<Player> DisplayedPlayers => GetDisplayedPlayers();

    private IEnumerable<Player> GetDisplayedPlayers()
    {
        var query = string.IsNullOrWhiteSpace(searchTerm)
            ? players
            : players.Where(p => p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

        query = sortColumn switch
        {
            nameof(Player.Name) => sortAscending
                ? query.OrderBy(p => p.Name)
                : query.OrderByDescending(p => p.Name),
            nameof(Player.BestWinTime) => sortAscending
                ? query.OrderBy(p => p.BestWinTime)
                : query.OrderByDescending(p => p.BestWinTime),
            nameof(Player.ConsecutiveWins) => sortAscending
                ? query.OrderBy(p => p.ConsecutiveWins)
                : query.OrderByDescending(p => p.ConsecutiveWins),
            nameof(Player.TotalWins) => sortAscending
                ? query.OrderBy(p => p.TotalWins)
                : query.OrderByDescending(p => p.TotalWins),
            _ => query
        };

        return query;
    }

    private void SortBy(string column)
    {
        if (sortColumn == column)
            sortAscending = !sortAscending;
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
    }

    private RenderFragment SortIndicator(string column) => builder =>
    {
        if (sortColumn == column)
        {
            var arrow = sortAscending ? "▲" : "▼";
            builder.AddContent(0, arrow);
        }
    };

    void Voltar() => Nav.NavigateTo("/lobby");
}